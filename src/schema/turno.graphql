scalar Date

""" Types """
type dates {
	label: String,
	value: Date,
	transportDate: Boolean
	beforeDate: String
	afterDate: String
}
input datesInput {
	label: String,
	value: Date,
	transportDate: Boolean
	beforeDate: String
	afterDate: String
}
type Turno {
	# mongoose id of the turno
	id:ID
	# This is a static tag for clasiffy your turn
	kind: turnKind
	# The name is just informative, it can be duplicated
	name: String
	# creator of the turn. It is just one person, and can be modify
	owner: User
	# Description of your turn. it is just informative
	description: String
	# the available charge are tags for your collaborators
	# they will allows you to gives or restric access to different pages
	availableCharges: [String]
	# each team member has an specific charge, from the availableCharge array
	team: [team]
	# the camping type is the kind of product that will be adquired by the patreon
	campingType: [campingType]
	# here you can define some kind of dates, like starting or ending dates
	dates: [dates]
	# price for each day spend in the camp
	nightPrice: Float
}
type team {
	user: User
	#the Team charge is limited, like the available charge to have min 3 and max 20 letters
	charge: String
}
type booleanLabel {
	#required for informative reasons in the frontend 
	label: String
	status: Boolean
}
type campingType {
	# Like: Acampado, Matrimonio, Hijos, etc...
	name: String
	# the food option and permissions, are arrays
	# and works as tags for clasify the campingType
	# they also work for gives or restric access to your campingtypes 
	foodOptions: [booleanLabel],
	permissions: [booleanLabel]
}
type dateTypes {
	# Like: Fecha de inicio, fecha final, etc.
	label: String
	beforeDate: String
	afterDate: String
}
""" Inputs """
input TurnoInput {
	id:ID
	#it will allows you to change the owner of the turn
	owner: ID
	kind: turnKind
	name: String
	description: String
	availableCharges: [String]
	team: [teamInput]
	campingType: [campingTypeInput]
	dates: [datesInput]
	nightPrice: Float
}

input teamInput {
	user: ID
	charge: String
}

input labelBoolean {
	label: String
	status: Boolean
}
input campingTypeInput {
	name: String
	foodOptions: [labelBoolean]
	permissions: [labelBoolean]
}

enum turnKind {
	# campamentos
	camping
	# convivencias
	convi
	# convivencia de matrimonio
	matri
	# convivencia de sacerdotes
	sacerdotes
	#convivencia mixta
	mixta
	# 🤷‍♂️
	pro
}

""" Query """

type Query {
	# 👮‍♂️ protected route.
	# 📬 expect the id of the Turno card
	# 🕵️‍♂️ return the Turno card with that id
	getTurno(id:ID!) : Turno
	# 👮‍♂️ protected route.
	# 📬 Limit of user to show. Offset of user to jump/hide
	# 🕵️‍♂️ return an array of all the turnos
	getTurnos(limit:Int, offset:Int) : [Turno]
}

type Mutation {
	# 👮‍♂️ protected route.
	# 📬 Expect a Turno input with at one of these account status: _STANDBY, SEND, ACCEPTED,DENIED, DELETED_ 
	# or one of these rol _patron, admin, sudo_.
	# 🕵️‍♂️ return the saved Turno
	createTurno(input: TurnoInput) : Turno
	# 👮‍♂️ protected route.
	# 📬 expect the new status and the email to be udated. 
	# 🕵️‍♂️ return the saved Turno
	updateTurno(input: TurnoInput) : Turno
	# 👮‍♂️ protected route.
	# 📬 expect the id to find the turno and delete it
	# 🔏 accesible for admin or super user
	# 🕵️‍♂️ return a string confirmation
	deleteTurno(id:ID!) : String
}
