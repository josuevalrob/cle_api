""" Types """
type Turno {
	id:ID
	kind: turnKind
	name: String
	description: String
	availableCharges: [String]
	team: [team]
	foodOptions: [String]
	permissions: [String]
	campingType: [campingType]
	dateTypes:[dateTypes]
}
type team {
	helperId: ID
	helperEmail: String
	charge: String
}
type nameAndLabel {
	label: String
}
type campingType {
	name: String
	foodOptions: [nameAndLabel],
	permissions: [nameAndLabel]
}
type dateTypes {
	label: String
	beforeData: String
	afterData: String
}
""" Inputs """
input TurnoInput {
	id:ID
	kind: turnKind
	name: String
	description: String
	availableCharges: [String]
	team: [teamInput]
	foodOptions: [String]
	permissions: [String]
	campingType: [campingTypeInput]
	dateTypes:[dateTypesInput]
}

input teamInput {
	helperId: ID
	helperEmail: String
	charge: String
}

input labelBoolean {
	label: String
	status: Boolean
}
input campingTypeInput {
	name: String
	foodOptions: [labelBoolean]
	permissions: [labelBoolean]
}

input dateTypesInput {
	label: String
	beforeData: String
	afterData: String
}

enum turnKind {
	camping
	convi
	matri
	sacerdotes
	mixta
	pro
}

""" Query """

type Query {
	getTurno(id:ID!) : Turno
	getTurnos(limit:Int, offset:Int) : [Turno]
}

type Mutation {
	createTurno(input: TurnoInput) : Turno
	updateTurno(input: TurnoInput) : Turno
	deleteTurno(id:ID!) : Boolean
}
