""" Types """
type Turno {
	# mongoose id of the turno
	id:ID
	# This is a tag for clasiffy your turn
	kind: turnKind
	# The name is just informative, it can be duplicated
	name: String
	# creator of the turn
	owner: User
	# Description of your turn. it is just informative
	description: String
	# the available charge will be tags for your collaborators
	availableCharges: [String]
	# each team member has an specific charge,
	# from the availableCharge array
	team: [team]
	# the food option and permissions, are arrays
	# and works as tags for clasify the campingType
	foodOptions: [String]
	permissions: [String]
	# the camping type is the kind of product that will
	# be adquired by the patreon
	campingType: [campingType]
	# here you can define some kind of dates, like starting or ending dates
	dateTypes:[dateTypes]
}
type team {
	user: User
	charge: String
}
type booleanLabel {
	label: String
	status: Boolean
}
type campingType {
	name: String
	foodOptions: [booleanLabel],
	permissions: [booleanLabel]
}
type dateTypes {
	label: String
	beforeDate: String
	afterDate: String
}
""" Inputs """
input TurnoInput {
	id:ID
	kind: turnKind
	name: String
	description: String
	availableCharges: [String]
	team: [teamInput]
	foodOptions: [String]
	permissions: [String]
	campingType: [campingTypeInput]
	dateTypes:[dateTypesInput]
}

input teamInput {
	user: ID
	charge: String
}

input labelBoolean {
	label: String
	status: Boolean
}
input campingTypeInput {
	name: String
	foodOptions: [labelBoolean]
	permissions: [labelBoolean]
}

input dateTypesInput {
	label: String
	beforeDate: String
	afterDate: String
}

enum turnKind {
	camping
	convi
	matri
	sacerdotes
	mixta
	pro
}

""" Query """

type Query {
	getTurno(id:ID!) : Turno
	getTurnos(limit:Int, offset:Int) : [Turno]
}

type Mutation {
	createTurno(input: TurnoInput) : Turno
	updateTurno(input: TurnoInput) : Turno
	deleteTurno(id:ID!) : String
}
