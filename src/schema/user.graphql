
input UserInput {
	id: ID
	rol: Rol
	email: String!
	password: String!
	firstName: String!
	lastName: String
	phone: String
	Country: String
	City: String
	birth: String
	profilePhoto: String
	charge: String
}
type User {
	id: ID
	rol: Rol
	email: String!
	firstName: String!
	lastName: String
	phone: String
	Country: String
	City: String
	birth: String
	profilePhoto: String
}
input UserUpdate {
	id: ID
	rol: Rol
	firstName: String
	lastName: String
	phone: String
	Country: String
	City: String
	birth: String
	profilePhoto: String
}
input UsersSearch {
	rol: Rol
	Country: String
	City: String
	birth: String
}
type UserUpdated {
	id: ID
	rol: Rol
	email: String
	password: String
	firstName: String
	lastName: String
	phone: String
	Country: String
	City: String
	birth: String
	profilePhoto: String
}
enum Rol {
	patron
	admin
	sudo
}
type AuthPayload {
	user: User
}
type Mutation {
	# 👤 unProtected route.
	# 📬 expect a user input, with at least email, first name and password
	# 🕵️‍♂️ return a new authenticated User
	signup(input:UserInput) : AuthPayload
	# 👤 unProtected route.
	# 📬 expect user email and user password
	# 🕵️‍♂️ return a new authenticated User
	login(email: String!, password: String!): AuthPayload
	# 👤 unProtected route.
	# 📭 no params needed
	# 🕵️‍♂️ return undefined
	logout: Boolean
	# 👮‍♂️ protected route.
	# 📬 expect a user input, with at least, first name and password. Never Update the email
	# 🕵️‍♂️ return a user type including email field
	updateUser(input:UserUpdate) : UserUpdated
	# 👮‍♂️ protected route. 
	# 🔏 accesible for admin or super user
	# 📬 expect the user id to find it and delete it
	# 🕵️‍♂️ return a String confirmation
	deleteUser( id: ID! ) : String
}

type Query {
	# 👮‍♂️ protected route.
	# 📭 no params needed
	# 🕵️‍♂️ return the current user for this session
	currentUser: User,
	# 👮‍♂️ protected route.
	# 📬 Mongoose Id of the user
	# 🕵️‍♂️ return the current user for this id
	getUser(id:String!): User
	# 👮‍♂️ protected route.
	# 📬 Limit of user to show. Offset of user to jump/hide
	# 🕵️‍♂️ return a list of users
	getUsers(input:UsersSearch,limit: Int, offset:Int) : [User]
}