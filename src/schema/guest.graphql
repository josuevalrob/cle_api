input GuestInput {
	id: ID
	letter: String
    owner: String
    protected: Boolean
	rol: Rol
	email: String!
	firstName: String!
    status: AccountStatus
}
type Guest {
	id: ID
	letter: String
    owner: String
    protected: Boolean
	rol: Rol
	email: String!
	firstName: String!
    status: AccountStatus
}
enum AccountStatus {
    STANDBY
    SEND
    ACCEPTED
    DENIED
    DELETED
}
enum Rol {
	patron
	admin
	sudo
}
"""Query """
type Query {
    getGuest(id:ID) : Guest
    getGuests(limit: Int, offset:Int) : [Guest]
}
""" Mutation to create new clients. """
type Mutation {
    #Nombre del resolver y el valor que retorna
    createGuest(input: GuestInput): Guest
    updateGuest(input: GuestInput): Guest
    deleteGuest( id: ID! ) : String
    sendGuest(email: String!, status:AccountStatus): Guest
}