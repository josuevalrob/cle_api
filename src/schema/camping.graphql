""" Inputs """
input CampingProfileInput {
  firstName: String
  lastName: String
  # All the inputs dates should be in date format
  birth: Date
  # the profile photo is an url reference of an image
  profilePhoto: String
  # array of alergies
  alergies: [String]
  # array of mnedications
  medication: [String]
  # current scholar course. this input is not validated
  curso: String
}

input scheduleFoodInput {
  day: Date
  value: String
}

input CampingInput {
  # ID of an existing turn. this field is not validated.
  turno: ID!
  # email of the user who is gonna buy the turn
  patreonEmail: String!
  # first name of the user who is gonna be in the turn
  firstName: String!
  # data of the current camping
  basicData: CampingProfileInput
  # data of the responsable of the camping/acampado
  contactData: CampingProfileInput
  # when the user is comming or leaving
  transporte: [datesInput]
  # calendario de comidas / el parte
  scheduleFood: [scheduleFoodInput]
}
input inputSearch {
  # ID of an existing turn. this field is not validated.
  turno: ID
  # email of the user who is gonna buy the turn
  patreonEmail: String
  # first name of the user who is gonna by the turn
}
""" types """
type Camping {
  id: ID
  # turno referenced by this camping
  turno: Turno
  # owner or the admin who created this camping
  owner: User
  # patreon who is paying for this camping
  patreon: User
  # patreon previusly invited for handle this camping
  guest: Guest
  # name of the camping
  firstName: String
  # data of the current camping
  basicData: CampingProfile
  # data of the responsable of the camping/acampado
  contactData: CampingProfile
  # when the user is comming or leaving
  transporte: [dates]
  # calendario de comidas / el parte
  scheduleFood: [scheduleFood]
}

type scheduleFood {
  day: Date
  value: String
}

type CampingProfile {
  firstName: String
  lastName: String
  birth: Date
  profilePhoto: String
  alergies: [String]
  medication: [String]
  curso: String
}

""" Query """

type Query {
	# 👮‍♂️ protected route.
	# 📬 expect the id of the Turno card
	# 🕵️‍♂️ return the Turno card with that id
	getCamping(id:ID!) : Camping
	# 👮‍♂️ protected route.
	# 📬 Limit of user to show. Offset of user to jump/hide
	# 🕵️‍♂️ return an array of all the turnos
	getCampings(input: inputSearch!, limit:Int, offset:Int) : [Camping]
}

type Mutation {
	# 👮‍♂️ protected route.
	# 📬 Expect a Turno input with at one of these account status: _STANDBY, SEND, ACCEPTED,DENIED, DELETED_ 
	# or one of these rol _patron, admin, sudo_.
	# 🕵️‍♂️ return the saved Turno
	createCamping(input: CampingInput) : Camping
	# 👮‍♂️ protected route.
	# 📬 expect the new status and the email to be udated. 
	# 🕵️‍♂️ return the saved Camping
	updateCamping(input: CampingInput) : Camping
	# 👮‍♂️ protected route.
	# 📬 expect the id to find the Camping and delete it
	# 🔏 accesible for admin or super user
	# 🕵️‍♂️ return a string confirmation
	deleteCamping(id:ID!) : String
}